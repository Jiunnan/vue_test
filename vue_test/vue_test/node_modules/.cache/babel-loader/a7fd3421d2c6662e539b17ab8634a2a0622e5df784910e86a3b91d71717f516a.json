{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createBlock as _createBlock, withModifiers as _withModifiers, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-64a318fc\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"settings\"\n};\nconst _hoisted_3 = [\"disabled\"];\nconst _hoisted_4 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_TextOptions = _resolveComponent(\"TextOptions\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    id: \"DemoSlotMachine\",\n    onClick: _cache[3] || (_cache[3] = _withModifiers($event => $data.openResultHistory = false, [\"self\"]))\n  }, [_createElementVNode(\"div\", {\n    class: _normalizeClass(['resultHistory', {\n      'openResultHistory': $data.openResultHistory\n    }])\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.resultHistory, (result, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"result\",\n      key: index\n    }, _toDisplayString(`Round${index + 1}: ${result}`), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))], 2 /* CLASS */), _createCommentVNode(\"  \"), _createElementVNode(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.configs, (config, index) => {\n    return _openBlock(), _createBlock(_component_TextOptions, {\n      onFinished: $options.isFinished,\n      trigger: $data.trigger,\n      config: config,\n      key: index\n    }, null, 8 /* PROPS */, [\"onFinished\", \"trigger\", \"config\"]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\"  \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"button\", {\n    class: \"btn\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.turn && $options.turn(...args)),\n    disabled: $data.disabled\n  }, \" START \", 8 /* PROPS */, _hoisted_3), _createElementVNode(\"button\", {\n    class: \"btn\",\n    onClick: _cache[1] || (_cache[1] = $event => $data.openResultHistory = true)\n  }, \" Result History \"), _createElementVNode(\"input\", {\n    type: \"checkbox\",\n    class: \"displayType\",\n    onChange: _cache[2] || (_cache[2] = (...args) => $options.changeDisplayMode && $options.changeDisplayMode(...args)),\n    disabled: $data.disabled\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_4)]), _createCommentVNode(\"  \")]);\n}","map":{"version":3,"names":["class","_createElementBlock","id","onClick","_cache","_withModifiers","$event","$data","openResultHistory","_createElementVNode","_normalizeClass","_Fragment","_renderList","resultHistory","result","index","key","_createCommentVNode","_hoisted_1","configs","config","_createBlock","_component_TextOptions","onFinished","$options","isFinished","trigger","_hoisted_2","args","turn","disabled","_hoisted_3","type","onChange","changeDisplayMode","_hoisted_4"],"sources":["/Users/jn/Desktop/work/Node/vue_test/vue_test/src/components/TextSlotMachine.vue"],"sourcesContent":["<!-- <template>\n    <div class=\"textSlotMachine\">\n        <h2>This is Text Slot Machine View.</h2>\n        <TextOptions\n         v-for=\"(config, index) in configs\" \n         @finished=\"isFinished\" \n         :trigger=\"trigger\" \n         :config=\"config\" \n         :key=\"index\">\n        </TextOptions>\n        <br/>\n        <br/>\n        <div class=\"buttonList\">\n            <button @click=\"run\" :disabled=\"disable\">開始轉動</button>\n            <button @click=\"openReasultHistoryList\">打開歷史中獎紀錄</button>\n            <input type=\"checkbox\" id=\"3DCheck\" name=\"3DCheck\" @change=\"changeDisplayModel\" :disabled=\"disable\"/>\n            <label for=\"3DCheck\">變成3D</label>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue';\nimport TextOptions from '@/components/TextOptions.vue';\nconst run3D = ref(false);\nconst trigger = ref();\nconst disable = ref(false);\nconst openReasultHistory = ref(false);\nconst result = ref([]);\nconst resultHistory = ref([]);\n// 拉霸選項範例\nconst configs = [\n    {\n        run3D: false,\n        rotateY: -25,\n        duration: 4000,\n        rollback: 0.3,\n        fontSize: 100,\n        height: 100,\n        width: 200,\n        options: Array.from(new Array(10), (val, index) => { return { type: 'text', name: index}}),\n    },\n    {\n        run3D: false,\n        rotateY: -25,\n        duration: 5000,\n        rollback: 0.3,\n        fontSize: 100,\n        height: 100,\n        width: 200,\n        options: Array.from(new Array(10), (val, index) => { return { type: 'text', name: index}}),\n    },\n    {\n        run3D: false,\n        rotateY: -25,\n        duration: 6000,\n        rollback: 0.3,\n        fontSize: 100,\n        height: 100,\n        width: 200,\n        options: Array.from(new Array(10), (val, index) => { return { type: 'text', name: index}}),\n    },\n];\n\nfunction run() {\n    disable.value = true;\n    trigger.value = new Date();\n}\n\nfunction isFinished (value) {\n    const autoRunList = this.$el.querySelectorAll('.autoRun');\n    result.value.push(value);\n    if (autoRunList.length === 1) {\n        disable.value = false;\n        resultHistory.value.push(result.value)\n        result.value = []\n    }\n}\n\nfunction openReasultHistoryList() {\n    console.log(\"JN - 打開歷史中獎紀錄\")\n}\n\nfunction changeDisplayModel (e) {\n    configs.array.forEach(item => {\n        item.run3D = e.target.checked\n    });\n}\n\n\n</script> -->\n\n<template>\n    <div id=\"DemoSlotMachine\" @click.self=\"openResultHistory = false\">\n      <div :class=\"['resultHistory', {'openResultHistory' : openResultHistory }]\">\n        <div class=\"result\" v-for=\"(result, index) in resultHistory\" :key=\"index\">{{ `Round${index + 1}: ${result}` }}</div>\n      </div>\n      <!--  -->\n      <div class=\"container\">\n        <TextOptions\n          v-for=\"(config, index) in configs\"\n          @finished=\"isFinished\"\n          :trigger=\"trigger\"\n          :config=\"config\"\n          :key=\"index\">\n        </TextOptions>\n      </div>\n      <!--  -->\n      <div class=\"settings\">\n        <button\n          class=\"btn\"\n          @click=\"turn\"\n          :disabled=\"disabled\">\n          START\n        </button>\n        <button\n          class=\"btn\"\n          @click=\"openResultHistory = true\">\n          Result History\n        </button>\n        <input\n          type=\"checkbox\"\n          class=\"displayType\"\n          @change=\"changeDisplayMode\"\n          :disabled=\"disabled\">\n      </div>\n      <!--  -->\n    </div>\n  </template>\n  \n  <script>\n  import TextOptions from '@/components/TextOptions.vue'\n  export default {\n    components: {\n        TextOptions\n    },\n    data () {\n      return {\n        run3D: true,\n        trigger: null,\n        disabled: false,\n        configs: [\n          {\n            run3D: false,\n            rotateY: -25,\n            duration: 4000,\n            rollback: 0.3,\n            fontSize: 100,\n            height: 100,\n            width: 200,\n            gifts: Array.from(new Array(10), (val, index) => { return { type: 'text', name: index } })\n          },\n          {\n            run3D: false,\n            rotateY: -25,\n            duration: 5000,\n            rollback: 0.3,\n            fontSize: 100,\n            height: 100,\n            width: 200,\n            gifts: Array.from(new Array(10), (val, index) => { return { type: 'text', name: index } })\n          },\n          {\n            run3D: false,\n            rotateY: -25,\n            duration: 6000,\n            rollback: 0.3,\n            fontSize: 100,\n            height: 100,\n            width: 200,\n            gifts: Array.from(new Array(10), (val, index) => { return { type: 'text', name: index } })\n          }\n        ],\n        openResultHistory: false,\n        result: [],\n        resultHistory: []\n      }\n    },\n    methods: {\n      turn () {\n        this.disabled = true\n        this.trigger = new Date()\n      },\n      isFinished (val) {\n        const autoTurnList = this.$el.querySelectorAll('.autoTurn')\n        this.result.push(val)\n        if (autoTurnList.length === 1) {\n          this.disabled = false\n          this.resultHistory.push(this.result)\n          this.result = []\n        }\n      },\n      changeDisplayMode (e) {\n        this.configs.forEach(item => (item.run3D = e.target.checked))\n      }\n    }\n  }\n  </script>\n  \n  <style lang=\"scss\" scoped>\n  #DemoSlotMachine {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n    .container {\n      display: flex;\n    }\n    .settings {\n      display: flex;\n      align-items: center;\n      position: absolute;\n      bottom: 5vh;\n      .btn {\n        margin-right: 20px;\n        padding: 15px 30px;\n        outline: none;\n        border: none;\n        border-radius: 10px;\n        background-color: #42b983;\n        color: #ffffff;\n        font-size: 16px;\n        cursor: pointer;\n        transition: 0.15s;\n        user-select: none;\n        &:disabled {\n          background-color: #ddd;\n          cursor: not-allowed;\n        }\n      }\n      .displayType {\n        position: relative;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        &::after {\n          position: absolute;\n          display: block;\n          left: 100%;\n          margin-left: 10px;\n          font-size: 16px;\n          content: '3D模式';\n          white-space: nowrap;\n        }\n        &:disabled {\n          background-color: #ddd;\n          cursor: not-allowed;\n        }\n      }\n    }\n    .resultHistory {\n      position: absolute;\n      transform: translateZ(99999px);\n      z-index: 999;\n      min-width: 300px;\n      height: 400px;\n      padding: 20px;\n      border: solid 5px #333;\n      border-radius: 30px;\n      background-color: #fff;\n      box-shadow: 5px 5px 15px rgba(0,0,0,0.4);\n      opacity: 0;\n      transition: 0.5s;\n      overflow-y: auto;\n      visibility: hidden;\n      .result {\n        padding: 15px;\n        list-style: none;\n        font-size: 30px;\n      }\n      &.openResultHistory {\n        opacity: 1;\n        visibility: visible;\n      }\n    }\n  }\n  </style>"],"mappings":";;;EAkGWA,KAAK,EAAC;AAAW;;EAUjBA,KAAK,EAAC;AAAU;mBA5G3B;mBAAA;;;uBA6FIC,mBAAA,CAkCM;IAlCDC,EAAE,EAAC,iBAAiB;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MA7FpCC,cAAA,CAAAC,MAAA,IA6F2CC,KAAA,CAAAC,iBAAiB;MACtDC,mBAAA,CAEM;IAFAT,KAAK,EA9FjBU,eAAA;MAAA,qBA8F4DH,KAAA,CAAAC;IAAiB;yBACrEP,mBAAA,CAAoHU,SAAA,QA/F5HC,WAAA,CA+FsDL,KAAA,CAAAM,aAAa,EA/FnE,CA+FoCC,MAAM,EAAEC,KAAK;yBAAzCd,mBAAA,CAAoH;MAA/GD,KAAK,EAAC,QAAQ;MAA2CgB,GAAG,EAAED;gCAAkBA,KAAK,SAASD,MAAM;mDAE3GG,mBAAA,MAAS,EACTR,mBAAA,CAQM,OARNS,UAQM,I,kBAPJjB,mBAAA,CAMcU,SAAA,QAzGtBC,WAAA,CAoGoCL,KAAA,CAAAY,OAAO,EApG3C,CAoGkBC,MAAM,EAAEL,KAAK;yBADvBM,YAAA,CAMcC,sBAAA;MAJXC,UAAQ,EAAEC,QAAA,CAAAC,UAAU;MACpBC,OAAO,EAAEnB,KAAA,CAAAmB,OAAO;MAChBN,MAAM,EAAEA,MAAM;MACdJ,GAAG,EAAED;;oCAGVE,mBAAA,MAAS,EACTR,mBAAA,CAiBM,OAjBNkB,UAiBM,GAhBJlB,mBAAA,CAKS;IAJPT,KAAK,EAAC,KAAK;IACVG,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAwB,IAAA,KAAEJ,QAAA,CAAAK,IAAA,IAAAL,QAAA,CAAAK,IAAA,IAAAD,IAAA,CAAI;IACXE,QAAQ,EAAEvB,KAAA,CAAAuB;KAAU,SAEvB,iBAlHRC,UAAA,GAmHQtB,mBAAA,CAIS;IAHPT,KAAK,EAAC,KAAK;IACVG,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAE,MAAA,IAAEC,KAAA,CAAAC,iBAAiB;KAAS,kBAEpC,GACAC,mBAAA,CAIuB;IAHrBuB,IAAI,EAAC,UAAU;IACfhC,KAAK,EAAC,aAAa;IAClBiC,QAAM,EAAA7B,MAAA,QAAAA,MAAA,UAAAwB,IAAA,KAAEJ,QAAA,CAAAU,iBAAA,IAAAV,QAAA,CAAAU,iBAAA,IAAAN,IAAA,CAAiB;IACzBE,QAAQ,EAAEvB,KAAA,CAAAuB;2CA5HrBK,UAAA,E,GA8HMlB,mBAAA,MAAS,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}