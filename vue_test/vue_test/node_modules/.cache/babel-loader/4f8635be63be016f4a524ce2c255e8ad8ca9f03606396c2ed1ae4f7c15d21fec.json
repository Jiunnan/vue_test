{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport TextOptions from '@/components/TextOptions.vue';\nexport default {\n  components: {\n    TextOptions\n  },\n  data() {\n    return {\n      run3D: true,\n      trigger: null,\n      disabled: false,\n      configs: [{\n        run3D: false,\n        rotateY: -25,\n        duration: 4000,\n        rollback: 0.3,\n        fontSize: 100,\n        height: 100,\n        width: 300,\n        gifts: Array.from(new Array(10), (val, index) => {\n          return {\n            type: 'text',\n            name: index\n          };\n        })\n      }, {\n        run3D: false,\n        rotateY: -25,\n        duration: 5000,\n        rollback: 0.3,\n        fontSize: 100,\n        height: 100,\n        width: 300,\n        gifts: Array.from(new Array(10), (val, index) => {\n          return {\n            type: 'text',\n            name: index\n          };\n        })\n      }, {\n        run3D: false,\n        rotateY: -25,\n        duration: 6000,\n        rollback: 0.3,\n        fontSize: 100,\n        height: 100,\n        width: 300,\n        gifts: Array.from(new Array(10), (val, index) => {\n          return {\n            type: 'text',\n            name: index\n          };\n        })\n      }],\n      openResultHistory: false,\n      result: [],\n      resultHistory: []\n    };\n  },\n  methods: {\n    turn() {\n      this.disabled = true;\n      this.trigger = new Date();\n    },\n    isFinished(val) {\n      const autoTurnList = this.$el.querySelectorAll('.autoTurn');\n      this.result.push(val);\n      if (autoTurnList.length === 1) {\n        this.disabled = false;\n        this.resultHistory.push(this.result);\n        this.result = [];\n      }\n    },\n    changeDisplayMode(e) {\n      this.configs.forEach(item => item.run3D = e.target.checked);\n    }\n  }\n};","map":{"version":3,"names":["TextOptions","components","data","run3D","trigger","disabled","configs","rotateY","duration","rollback","fontSize","height","width","gifts","Array","from","val","index","type","name","openResultHistory","result","resultHistory","methods","turn","Date","isFinished","autoTurnList","$el","querySelectorAll","push","length","changeDisplayMode","e","forEach","item","target","checked"],"sources":["/Users/jn/Desktop/work/Node/vue_test/vue_test/src/components/TextSlotMachine.vue"],"sourcesContent":["<!-- <template>\n    <div class=\"textSlotMachine\">\n        <h2>This is Text Slot Machine View.</h2>\n        <TextOptions\n         v-for=\"(config, index) in configs\" \n         @finished=\"isFinished\" \n         :trigger=\"trigger\" \n         :config=\"config\" \n         :key=\"index\">\n        </TextOptions>\n        <br/>\n        <br/>\n        <div class=\"buttonList\">\n            <button @click=\"run\" :disabled=\"disable\">開始轉動</button>\n            <button @click=\"openReasultHistoryList\">打開歷史中獎紀錄</button>\n            <input type=\"checkbox\" id=\"3DCheck\" name=\"3DCheck\" @change=\"changeDisplayModel\" :disabled=\"disable\"/>\n            <label for=\"3DCheck\">變成3D</label>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue';\nimport TextOptions from '@/components/TextOptions.vue';\nconst run3D = ref(false);\nconst trigger = ref();\nconst disable = ref(false);\nconst openReasultHistory = ref(false);\nconst result = ref([]);\nconst resultHistory = ref([]);\n// 拉霸選項範例\nconst configs = [\n    {\n        run3D: false,\n        rotateY: -25,\n        duration: 4000,\n        rollback: 0.3,\n        fontSize: 100,\n        height: 100,\n        width: 200,\n        options: Array.from(new Array(10), (val, index) => { return { type: 'text', name: index}}),\n    },\n    {\n        run3D: false,\n        rotateY: -25,\n        duration: 5000,\n        rollback: 0.3,\n        fontSize: 100,\n        height: 100,\n        width: 200,\n        options: Array.from(new Array(10), (val, index) => { return { type: 'text', name: index}}),\n    },\n    {\n        run3D: false,\n        rotateY: -25,\n        duration: 6000,\n        rollback: 0.3,\n        fontSize: 100,\n        height: 100,\n        width: 200,\n        options: Array.from(new Array(10), (val, index) => { return { type: 'text', name: index}}),\n    },\n];\n\nfunction run() {\n    disable.value = true;\n    trigger.value = new Date();\n}\n\nfunction isFinished (value) {\n    const autoRunList = this.$el.querySelectorAll('.autoRun');\n    result.value.push(value);\n    if (autoRunList.length === 1) {\n        disable.value = false;\n        resultHistory.value.push(result.value)\n        result.value = []\n    }\n}\n\nfunction openReasultHistoryList() {\n    console.log(\"JN - 打開歷史中獎紀錄\")\n}\n\nfunction changeDisplayModel (e) {\n    configs.array.forEach(item => {\n        item.run3D = e.target.checked\n    });\n}\n\n\n</script> -->\n\n<template>\n    <div id=\"DemoSlotMachine\" @click.self=\"openResultHistory = false\">\n      <div :class=\"['resultHistory', {'openResultHistory' : openResultHistory }]\">\n        <div class=\"result\" v-for=\"(result, index) in resultHistory\" :key=\"index\">{{ `Round${index + 1}: ${result}` }}</div>\n      </div>\n      <!--  -->\n      <div class=\"container\">\n        <TextOptions\n          v-for=\"(config, index) in configs\"\n          @finished=\"isFinished\"\n          :trigger=\"trigger\"\n          :config=\"config\"\n          :key=\"index\">\n        </TextOptions>\n      </div>\n      <!--  -->\n      <div class=\"settings\">\n        <button\n          class=\"btn\"\n          @click=\"turn\"\n          :disabled=\"disabled\">\n          START\n        </button>\n        <button\n          class=\"btn\"\n          @click=\"openResultHistory = true\">\n          Result History\n        </button>\n        <input\n          type=\"checkbox\"\n          class=\"displayType\"\n          @change=\"changeDisplayMode\"\n          :disabled=\"disabled\">\n      </div>\n      <!--  -->\n    </div>\n  </template>\n  \n  <script>\n  import TextOptions from '@/components/TextOptions.vue'\n  export default {\n    components: {\n        TextOptions\n    },\n    data () {\n      return {\n        run3D: true,\n        trigger: null,\n        disabled: false,\n        configs: [\n          {\n            run3D: false,\n            rotateY: -25,\n            duration: 4000,\n            rollback: 0.3,\n            fontSize: 100,\n            height: 100,\n            width: 300,\n            gifts: Array.from(new Array(10), (val, index) => { return { type: 'text', name: index } })\n          },\n          {\n            run3D: false,\n            rotateY: -25,\n            duration: 5000,\n            rollback: 0.3,\n            fontSize: 100,\n            height: 100,\n            width: 300,\n            gifts: Array.from(new Array(10), (val, index) => { return { type: 'text', name: index } })\n          },\n          {\n            run3D: false,\n            rotateY: -25,\n            duration: 6000,\n            rollback: 0.3,\n            fontSize: 100,\n            height: 100,\n            width: 300,\n            gifts: Array.from(new Array(10), (val, index) => { return { type: 'text', name: index } })\n          }\n        ],\n        openResultHistory: false,\n        result: [],\n        resultHistory: []\n      }\n    },\n    methods: {\n      turn () {\n        this.disabled = true\n        this.trigger = new Date()\n      },\n      isFinished (val) {\n        const autoTurnList = this.$el.querySelectorAll('.autoTurn')\n        this.result.push(val)\n        if (autoTurnList.length === 1) {\n          this.disabled = false\n          this.resultHistory.push(this.result)\n          this.result = []\n        }\n      },\n      changeDisplayMode (e) {\n        this.configs.forEach(item => (item.run3D = e.target.checked))\n      }\n    }\n  }\n  </script>\n  \n  <style lang=\"scss\" scoped>\n  #DemoSlotMachine {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n    .container {\n      display: flex;\n    }\n    .settings {\n      display: flex;\n      align-items: center;\n      position: absolute;\n      bottom: 5vh;\n      .btn {\n        margin-right: 20px;\n        padding: 15px 30px;\n        outline: none;\n        border: none;\n        border-radius: 10px;\n        background-color: #42b983;\n        color: #ffffff;\n        font-size: 16px;\n        cursor: pointer;\n        transition: 0.15s;\n        user-select: none;\n        &:disabled {\n          background-color: #ddd;\n          cursor: not-allowed;\n        }\n      }\n      .displayType {\n        position: relative;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        &::after {\n          position: absolute;\n          display: block;\n          left: 100%;\n          margin-left: 10px;\n          font-size: 16px;\n          content: '3D模式';\n          white-space: nowrap;\n        }\n        &:disabled {\n          background-color: #ddd;\n          cursor: not-allowed;\n        }\n      }\n    }\n    .resultHistory {\n      position: absolute;\n      transform: translateZ(99999px);\n      z-index: 999;\n      min-width: 300px;\n      height: 400px;\n      padding: 20px;\n      border: solid 5px #333;\n      border-radius: 30px;\n      background-color: #fff;\n      box-shadow: 5px 5px 15px rgba(0,0,0,0.4);\n      opacity: 0;\n      transition: 0.5s;\n      overflow-y: auto;\n      visibility: hidden;\n      .result {\n        padding: 15px;\n        list-style: none;\n        font-size: 30px;\n      }\n      &.openResultHistory {\n        opacity: 1;\n        visibility: visible;\n      }\n    }\n  }\n  </style>"],"mappings":";AAmIE,OAAOA,WAAU,MAAO,8BAA6B;AACrD,eAAe;EACbC,UAAU,EAAE;IACRD;EACJ,CAAC;EACDE,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,KAAK,EAAE,IAAI;MACXC,OAAO,EAAE,IAAI;MACbC,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAE,CACP;QACEH,KAAK,EAAE,KAAK;QACZI,OAAO,EAAE,CAAC,EAAE;QACZC,QAAQ,EAAE,IAAI;QACdC,QAAQ,EAAE,GAAG;QACbC,QAAQ,EAAE,GAAG;QACbC,MAAM,EAAE,GAAG;QACXC,KAAK,EAAE,GAAG;QACVC,KAAK,EAAEC,KAAK,CAACC,IAAI,CAAC,IAAID,KAAK,CAAC,EAAE,CAAC,EAAE,CAACE,GAAG,EAAEC,KAAK,KAAK;UAAE,OAAO;YAAEC,IAAI,EAAE,MAAM;YAAEC,IAAI,EAAEF;UAAM;QAAE,CAAC;MAC3F,CAAC,EACD;QACEd,KAAK,EAAE,KAAK;QACZI,OAAO,EAAE,CAAC,EAAE;QACZC,QAAQ,EAAE,IAAI;QACdC,QAAQ,EAAE,GAAG;QACbC,QAAQ,EAAE,GAAG;QACbC,MAAM,EAAE,GAAG;QACXC,KAAK,EAAE,GAAG;QACVC,KAAK,EAAEC,KAAK,CAACC,IAAI,CAAC,IAAID,KAAK,CAAC,EAAE,CAAC,EAAE,CAACE,GAAG,EAAEC,KAAK,KAAK;UAAE,OAAO;YAAEC,IAAI,EAAE,MAAM;YAAEC,IAAI,EAAEF;UAAM;QAAE,CAAC;MAC3F,CAAC,EACD;QACEd,KAAK,EAAE,KAAK;QACZI,OAAO,EAAE,CAAC,EAAE;QACZC,QAAQ,EAAE,IAAI;QACdC,QAAQ,EAAE,GAAG;QACbC,QAAQ,EAAE,GAAG;QACbC,MAAM,EAAE,GAAG;QACXC,KAAK,EAAE,GAAG;QACVC,KAAK,EAAEC,KAAK,CAACC,IAAI,CAAC,IAAID,KAAK,CAAC,EAAE,CAAC,EAAE,CAACE,GAAG,EAAEC,KAAK,KAAK;UAAE,OAAO;YAAEC,IAAI,EAAE,MAAM;YAAEC,IAAI,EAAEF;UAAM;QAAE,CAAC;MAC3F,EACD;MACDG,iBAAiB,EAAE,KAAK;MACxBC,MAAM,EAAE,EAAE;MACVC,aAAa,EAAE;IACjB;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,IAAGA,CAAA,EAAK;MACN,IAAI,CAACnB,QAAO,GAAI,IAAG;MACnB,IAAI,CAACD,OAAM,GAAI,IAAIqB,IAAI,CAAC;IAC1B,CAAC;IACDC,UAASA,CAAGV,GAAG,EAAE;MACf,MAAMW,YAAW,GAAI,IAAI,CAACC,GAAG,CAACC,gBAAgB,CAAC,WAAW;MAC1D,IAAI,CAACR,MAAM,CAACS,IAAI,CAACd,GAAG;MACpB,IAAIW,YAAY,CAACI,MAAK,KAAM,CAAC,EAAE;QAC7B,IAAI,CAAC1B,QAAO,GAAI,KAAI;QACpB,IAAI,CAACiB,aAAa,CAACQ,IAAI,CAAC,IAAI,CAACT,MAAM;QACnC,IAAI,CAACA,MAAK,GAAI,EAAC;MACjB;IACF,CAAC;IACDW,iBAAgBA,CAAGC,CAAC,EAAE;MACpB,IAAI,CAAC3B,OAAO,CAAC4B,OAAO,CAACC,IAAG,IAAMA,IAAI,CAAChC,KAAI,GAAI8B,CAAC,CAACG,MAAM,CAACC,OAAQ;IAC9D;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}